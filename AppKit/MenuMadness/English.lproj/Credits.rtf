{\rtf1\mac\ansicpg10000{\fonttbl\f0\froman\fcharset77 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs28 \cf0 This application shows off some of the tricks you can do with menus.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b\fs36 \cf0 Things of note\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b0\fs28 \cf0 \

\b In the nib file
\b0 \
\
The first several menus show the current suggested menu layout; this layout is subject to change still.  See the documentation and release notes for full details.\
\
After the "Help" menu (which should be the last menu in normal apps) there is a menu titled "Uh Oh".  Look inside this menu for some examples of what you should not do with menus.\
\
The only other interesting thing in the nib file is the static text field labeled "App context menu here".  If you look at this field's connections you'll see that it has its menu outlet connected to the main menu.  When you right click on this text field in the running app, you will get a full copy of the main menu.\
\

\b In Controller.[hm]
\b0 \
\
The first two methods in this class create new menus and insert them in the menu bar.  The flashy menu is created programmatically because Interface Builder does not yet support setting menu images and state images.  The tricky menu is created programmatically for the same reason, but also so that the "tricky" aspects will be clearer.  The tricky stuff is described a bit later.\
\
The next method creates the sample popups and pulldowns.  There are normal popups and pulldowns as well as image popups and pulldowns.  There are also a couple that demonstrate the use of the preferredEdge API.  Just play with them and then see how they are created in the code.\
\
Next is 
\b applicationWillFinishLaunching:
\b0  which calls all the menu creating methods.  When adding new menus to your application at runtime, it is best to do it in 
\b applicationWillFinishLaunching:
\b0  instead of 
\b applicationDidFinishLaunching:
\b0 .  If you do it in the latter method then if the user tears off any of these menus, the AppKit won't be able to restore them properly during launching.  Also, other AppKit menus might get added during launching such as the Input Manager menu.  If you add your menus first, your menus will win out in any key equivalent conflicts.\
\
The method 
\b noopAction:
\b0  is there merely to serve as the action for some of the menu items that we don't want to appear disabled.\
\
The other actions and the 
\b validateMenuItem:
\b0  method have to do with the tricky menus.  
\b validateMenuItem:
\b0  is called if the target of a menu action implements it in order to enable or disable the menu item.  However, this method is also a good place to do tricky stuff like state management, title changes, and so on.\
\
The "Empty Trash..." menu item is implemented to ask if you are sure first.  But if you hold the option key while choosing the item, it does not ask.  Not only that but if you hold down the option key its title will be "Really Empty Trash" and its key equivalent will be altered to include the option key.  The behavior change is acheived by changing the action of the item appropriately.  The title and the rest will update automatically as the user presses or releases the option key even during menu tracking.  Not only that but this will all work even if the menu item is invoked through the key equivalent.  So Command-T will ask to be sure but Command-Option-T will not.\
\
The group of Radio items is implemented by storing the tag of the selected item in an instance variable.  When we validate the radio items we set the state of the selected one to one and we set the state of all the unselected ones to off.  This is simple and effective and hard to fool.  If the value of the instance variable that reflects the state changes, the menu will reflect that.  When the user chooses an item, the 
\b radioAction:
\b0  method updates the instance variable to the chosen item's tag.\
\
The last two items are toggle switches.  The first toggles by showing a checkmark when it is on and showing no checkmark when it is off.  The second one changes its title from "Hide Something" to "ShowSomething".  Both are implemented very similarly to the radio items only simpler.\
}
