{\rtf1\mac\ansicpg10000\cocoartf812\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\info}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b\fs24 \cf0 ReadMe for MLTEShowcase
\f1\b0 \
\
This is the MLTEShowcase sample code project.  It is designed to demonstrate some usage scenarios for (some) new MLTE API introduced in Tiger (Mac OS 10.4).   Requires Mac OS X 10.4 (Tiger) or later.\
\
The application contains a window with an HITextView (which uses MLTE for the underlying text engine), and a series of controls that will dispatch commands to demonstrate various tasks that can be accomplished using the new MLTE API.  The application also contains a UnicodeEditText control (which also uses MLTE for the underlying text engine) which displays some helpful notifications.\
\
The new MLTE API introduced in Tiger (Mac OS 10.4) demonstrated by MLTEShowcase are:\
\
1) TXNSetCommandEventSupport() used to enable or disable MLTE support for specific kEventCommandProcess and kEventCommandUpdateStatus events.  In Tiger, the command events which can be handled by MLTE include: Edit commands (cut, copy, paste, clear, etc.), Spellchecking commands (generated by the new Carbon Spellcheck Panel), and Font Panel commands (generated by the Carbon Font Panel and its subpanels - typography, color picker, etc.)\
\
2) TXNBeginActionGroup() and TXNEndActionGroup() used to bracket a series of edit actions that an application wants to be treated as a single edit action for the purpose of management by the MLTE undo/redo stack.  Using these API, it is possible to make a series of programmatic editing actions, and then undo them with a single undo command.\
\
3) New tags for TXNSetTXNObjectControls API to control autoscroll behavior:\
\
The kTXNAutoScrollBehaviorTag is passed to the TXNSetTXNObjectControls along with one of three new constant flags to request the MLTE object to perform autoscrolling behavior specified by the constant.  The three constants are:\
\
kAutoScrollInsertionIntoView : specifies that autoscrolling should occur whenever an edit action takes place - the text will autoscroll to the location of the insertion caret.\
\
kAutoScrollNever : specifies that autoscrolling should never take place.\
\
kAutoScrollWhenInsertionVisible : specifies that autoscrolling similar to kAutoScrollInsertionIntoView should take place only if the insertion caret is visible on screen before the edit action occurred.\
\
4) TXNReadFromCFURL() and TXNWriteRangeToCFURL() are the new MLTE API to read and write file data using a CFURLRef to a file.  Only URLs to files on mounted volumes can be accessed via these APIs (i.e. those readable in a browser via the file:// protocol.)\
\
5) Menu customization API: NewTXNContextualMenuSetupUPP(), TXNSetContextualMenuSetup(), NewTXNActionNameMapperUPP(), and TXNSetActionNameMapper().  These API allow some customization of the edit menu and the spellchecking contextual menu.\
\
6) HITextView APIs:\
\
HITextViewGetTXNObject() - used to obtain the TXNObject from the HITextView so that the TXNObject may be used with MLTE APIs.\
\
HITextViewSetBackgroundColor() may be used to set a color and or alpha transparency background.  This API is used in the MLTEShowcase to set an alpha transparency which allows an HIImageView behind the HITextView to be visible through the transparency.\
}