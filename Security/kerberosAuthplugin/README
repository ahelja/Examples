

KERBEROS-AUTHPLUGIN
-------------------

This project builds an AuthorizationPlugin that performs kerberos
authentication and falls back on DirectoryService authentication.  For
kerberos authentication there is a mode that just authenticates the user
and one that also authenticates the server.

The current implementation uses the KfM KL APIs, which under the hood
deal with both v4 and v5.

The kerberos-authplugin target builds kerberos.bundle which gets
installed in /System/Library/CoreServices/SecurityAgentPlugins

It provides the following modes:
- kerberos:none						bypass, just allows login (for testing)
- kerberos:authenticate				authenticate user to KDC and then authenticate the KDC
- kerberos:authenticate-noverify	authenticate user to KDC, skip authentication of KDC
- kerberos:login					try to get a TGT, but don't block login on failure

All of these should be post-fixed with ,privileged such that they run in
the authhost and the credential cache can be handed to the user on
success, as well as being able to read a local keytab to authenticate
the kdc.

Modify system.login.console by editing /etc/authorization by hand or
with the API in Security/AuthorizationDB.h

This sample just exists as a (relatively complete) starting point to
modify and get the actually desired behavior.  The test binary allows
you to test the code outside of the plugin.


Sample Use:

1.	Compile the project
2.	Copy the resulting bundle to the auth plugins directory:

	sudo cp -R $BUILDDIR/kerberos.bundle /System/Library/CoreServices/SecurityAgentPlugins/
	
3.	Make a copy of the existing /etc/authorization file:

	sudo cp /etc/authorization /etc/authorization-orig
	
4.	Add a line to /etc/authorization to call the bundle. To do this
	for testing, use your favorite editor, e.g.

		sudo pico /etc/authorization
		
	then look for "system.login.console". A few lines below this key,
	replace the "authinternal" line with the desired kerberos line, e.g.:
	
		<key>mechanisms</key>
		<array>
				<string>builtin:auto-login,privileged</string>
				<string>loginwindow_builtin:login</string>
				<string>builtin:reset-password,privileged</string>
+				<string>kerberos:authenticate,privileged</string>
-				<string>authinternal</string>
				<string>builtin:getuserinfo,privileged</string>
				...
				
	The new line is marked with a "+"; the original, deleted line is
	marked with a "-". Don't include the "+" sign in the file, and delete
	the line with the "-". See the code in "mechanismCreate" for where
	this is used.

5.	If you have fast user switching enabled, you can quickly see the
	results by selecting a different user from the user menu.
	
Note: The preferred way to modify the /etc/authorization file is to use
the Authorization APIs in <Security/AuthorizationDB.h>. This is always
how it should be done in shipping products, as there may have been other
modifications to the /etc/authorization file. A code snippet to do this
is:

#include <CoreFoundation/CoreFoundation.h>
#include <Security/AuthorizationDB.h>

#define LOGIN_RIGHT "system.login.console"

int main(int argc, char *argv[])
{
    CFDictionaryRef login_dict;
    OSStatus status;
    AuthorizationRef authRef;

    status = AuthorizationCreate(NULL, NULL, 0, &authRef);
    if (status) exit(1);

    status = AuthorizationRightGet(LOGIN_RIGHT, &login_dict);
    if (status) exit(1);

    CFArrayRef arrayRef;
    if (!CFDictionaryGetValueIfPresent(login_dict, CFSTR("mechanisms"),
    	&arrayRef))
        exit(1);

    CFMutableArrayRef newMechanisms = CFArrayCreateMutableCopy(NULL, 0,
    	arrayRef);
    if (!newMechanisms)
        exit(1);

    CFIndex index = CFArrayGetFirstIndexOfValue(newMechanisms,
    	CFRangeMake(0, CFArrayGetCount(newMechanisms)), CFSTR("authinternal"));

    if (index == -1)
        exit(1);

    CFArraySetValueAtIndex(newMechanisms, index, CFSTR("newmech"));

    CFMutableDictionaryRef new_login_dict 
    	= CFDictionaryCreateMutableCopy(NULL, 0, login_dict);

    CFDictionarySetValue(new_login_dict, CFSTR("mechanisms"), newMechanisms);

    status = AuthorizationRightSet(authRef, LOGIN_RIGHT, new_login_dict,
    	NULL, NULL, NULL);

    if (status) exit(1);
}
