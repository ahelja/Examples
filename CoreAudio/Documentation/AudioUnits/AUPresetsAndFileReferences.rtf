{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red104\green56\blue33;}
\margl1440\margr1440\vieww16780\viewh14680\viewkind0
\deftab160
\pard\tqr\tx1020\tx1040\pardeftab160\li1040\fi-1040\ql\qnatural

\f0\fs48 \cf0 Audio Unit Presets and File References\
\pard\tqr\tx1020\tx1040\pardeftab160\li1040\fi-1040\ql\qnatural

\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab160\ql\qnatural
\cf0 This document describes an optional extension to the Audio Unit preset format in order to make it possible for host applications to collect all external file assets used in a project. This allows a user to archive a project with confidence that all of the external files it uses (e.g. samples, sample banks, etc.) are also archived.\
\
It also permits Audio Unit developers to create smaller presets by storing only references to large external files, rather than embedding the contents of a large file in the preset -- an Audio Unit should not do this.\
\
For example, the DLS synth does not store the contents of its current sound bank, just a reference to it (though not in this new proposed way). When loading a preset, it attempts to find the bank by name in certain known search directories.\
\
\

\f1\b\fs28 1. Audio Unit behavior\

\f0\b0\fs24 \
Audio Units whose presets contain references to files should store a new key/value in their preset dictionaries:\
	key 
\f2\fs18 \cf2 \CocoaLigature0 kAUPresetExternalFileRefs 
\f0\fs24 \cf0 \CocoaLigature1 ("file-references") --> dictionary\
		dictionary contents:\
			AU-defined key (string) --> full path (string)\
			...\
\
Thus, a preset may refer to any number of files, identifying each file's role in the preset with a key of the AU's choosing.\
\
When an Audio Unit receives a preset from a host, it should be prepared to search for any missing files.\
\
\

\f1\b\fs28 2. Host behavior\

\f0\b0\fs24 \
Hosts may present the user with a command to consolidate the external files referenced by a collection of Audio Units, by copying the files into a single directory or even by archiving them into a single file (a zip or tar archive, for example).\
\
The details of this are up to the host's implementation.\
\
When the host restores an archived project, extracting presets and their referenced files, each preset's file-references dictionary must be modified as necessary to reference a valid file.\
\
If, for whatever reason, a referenced file cannot be located, the host should pass the last known valid full path for the referenced file, and in particular, that path MUST end with the same file name that the Audio Unit had stored. This makes it possible for the Audio Unit to display the name of the missing file.\
\
\

\f1\b\fs28 3. Note about file paths in CFStrings\

\f0\b0\fs24 \
This API would have required CFURL's instead of CFStrings in the preset's dictionary, except that CFURL's cannot currently be stored in plists. CFURL is a more reliable representation of a file's path than CFString. Why?\
\
Full POSIX file paths in CFStrings potentially contain unnormalized Unicode. To access a path stored a CFString, convert it to a CFURLRef. This will perform the Unicode normalization. The CFURLRef can then be converted to an FSRef for use with the Carbon File Manager, used directly in Cocoa, or converted to a POSIX UTF-8 encoded path in a C string.\
\
Some of the relevant CFURL functions are CFURLCopyFileSystemPath() and CFURLCreateWithFileSystemPath().\
\
The Carbon File Manager API's using UniChar's for filenames also perform Unicode normalization.\
}