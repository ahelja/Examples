{\rtf1\mac\ansicpg10000\cocoartf796
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\info}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b\fs24 \cf0 Read Me for ATSUICurveAccessDemo
\f1\b0 \
\
This sample code demonstrates low-level ATSUI APIs which allow access to raw glyph curve data. This sample has been tested and works correctly on all Mac OS X releases, including 10.0.0. The meat of the example is in the files atsui.c, cubic.c, and quadratic.c.\
\
\'a5 Text drawn in black is from a standard ATSUDrawText call.\
\'a5 Text outlined in blue is drawn using the cubic outlines.\
\'a5 Text outlined in red is drawn using the quadratic outlines.\
\
By default, glyph outlines are drawn using built-in CoreGraphics routines for handling cubic and quadratic curves. However, a Quickdraw-based mode is also included, which simply draws a "connect the dots" representation of the outlines, making it easy to see the individual segments. A real application will no doubt have its own curve drawing routines.\
\
\CocoaLigature0 Many glyphs contain lines of zero length. These are called "degenerate contours", and they are not usually meant to be drawn. Their purpose in most cases is to indicate special parts of the glyph, such as attachment points. Using the drawing code in this program, these will normally show up as dots. However, the conditionals that have comments marking them as a "degenerate filter" are meant to filter out these zero-length segments. The conditionals are triggered by the global flag "gFilterDegenerates", which is toggled via the "Filter Degenerate Cases" menu item. The ATSUI documentation has an example very similar to the code in this program, but it leaves out the degenerate filter for purposes of brevity.\
\CocoaLigature1 \
System notes:\
\
- On Mac OS X 10.1 Puma and 10.2 Jaguar, ATSUI deals with all glyph outlines in terms of quadratics, even if the glyph's native outline format is cubic. If you call the function \CocoaLigature0 ATSUGlyphGetCubicPaths(), it will always return cubic outlines that have been converted from quadratic outlines. For this reason, ATSUGetNativeCurveType() will always return kATSQuadCurveType on these systems, even if the font is actually stored as cubic outlines on disk. This problem is not present in Mac OS X 10.3 Panther and later releases. On these systems, ATSUGetNativeCurveType() will repsond with the appropriate native format of a font, and ATSUGlyphGetCubicPaths() will return the native cubic outlines for cubic fonts.\
\
- When you ask for outlines of bitmap-only fonts, ATSUI will return curves that follow an outline of a scaled version of the bitmap. However, there is a known problem with this on systems prior to 10.3 Panther. Sometimes the outlines fail to appear due to failed memory allocations. A fix is in place in Mac OS X 10.3 Panther and later systems.}